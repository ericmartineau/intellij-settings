<templateSet group="user">
  <template name="anb" value="com.google.common.base.Preconditions.checkArgument(org.apache.commons.lang3.StringUtils.isNotBlank($VAR$), &quot;$VAR$ must not be blank&quot;);" description="" toReformat="true" toShortenFQNames="true">
    <variable name="VAR" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="cnn" value="com.google.common.base.Preconditions.checkNotNull($VAR$, &quot;$VAR$ must not be null&quot;);" description="" toReformat="true" toShortenFQNames="true" useStaticImport="true">
    <variable name="VAR" expression="suggestVariableName()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="imb" value="Map&lt;$type$, $type2$&gt; $var$ = new com.google.common.collect.ImmutableMap.Builder&lt;$type$, $type2$&gt;().build()" description="" toReformat="true" toShortenFQNames="true">
    <variable name="type" expression="" defaultValue="java.lang.String" alwaysStopAt="true" />
    <variable name="type2" expression="" defaultValue="java.lang.Object" alwaysStopAt="true" />
    <variable name="var" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
    </context>
  </template>
  <template name="bc" value="this.$VAR$ = builder.$VAR$;" description="Constructor for builder" toReformat="true" toShortenFQNames="true">
    <variable name="VAR" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="bs" value="public Builder $VAR$($TYPE$ $VAR$) {&#10;    Preconditions.checkNotNull($VAR$, &quot;$VAR$ cannot be null&quot;);&#10;    $CURSOR$Preconditions.checkArgument(!StringUtils.isBlank($VAR$), &quot;$VAR$ cannot be blank&quot;);&#10;    &#10;            this.$VAR$ = $VAR$;&#10;            return this;&#10;        }" description="Builder Setter" toReformat="true" toShortenFQNames="true">
    <variable name="VAR" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="TYPE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="CURSOR" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="dde" value="domain.set$FIELD$(entity.get$FIELD$());" description="Domain to Entity" toReformat="true" toShortenFQNames="true">
    <variable name="FIELD" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="eed" value="entity.set$FIELD$(domain.get$FIELD$());" description="Entity to Domain" toReformat="true" toShortenFQNames="true">
    <variable name="FIELD" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="hm" value="new java.util.HashMap&lt;&gt;()" description="New HashMap" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
    </context>
  </template>
  <template name="initmock" value="@org.testng.annotations.BeforeMethod&#10;    public void before() {&#10;        initMocks(this);&#10;    }&#10;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="lom" value="@lombok.Getter&#10;@lombok.Setter&#10;@lombok.EqualsAndHashCode&#10;@lombok.ToString&#10;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="lomd" value="@lombok.Getter&#10;@lombok.EqualsAndHashCode&#10;@lombok.ToString&#10;@lombok.Builder&#10;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="bb" value="$CLASSNAME$.builder()&#10;        $CURSOR$&#10;                .build()" description="" toReformat="true" toShortenFQNames="true">
    <variable name="CLASSNAME" expression="className()" defaultValue="" alwaysStopAt="true" />
    <variable name="CURSOR" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
    </context>
  </template>
  <template name="ttt" value="$DEC$ $VAR$ = com.infusionsoft.utils.transformers.Transformers.getTransformer($DEC$.class);" description="Transformer Field" toReformat="true" toShortenFQNames="true" useStaticImport="true">
    <variable name="DEC" expression="annotated(&quot;org.mapstruct.Mapper&quot;)" defaultValue="" alwaysStopAt="true" />
    <variable name="VAR" expression="suggestVariableName()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="jpl" value="    public void addTo$UPPERVAR$s($UPPERVAR$Entity $LOWERVAR$) {&#10;        Preconditions.checkNotNull($LOWERVAR$, &quot;$LOWERVAR$ must not be null&quot;);&#10;        $LOWERVAR$.set$BACKREF$(this);&#10;        if (this.$LOWERVAR$s == null) {&#10;            this.$LOWERVAR$s = new ArrayList&lt;&gt;();&#10;        }&#10;        this.$LOWERVAR$s.add($LOWERVAR$);&#10;    }&#10;&#10;    public void set$UPPERVAR$s(@Nullable List&lt;$UPPERVAR$Entity&gt; $LOWERVAR$s) {&#10;        this.$LOWERVAR$s = new ArrayList&lt;&gt;();&#10;        if ($LOWERVAR$s != null) {&#10;            $LOWERVAR$s.forEach(this::addTo$UPPERVAR$s);    &#10;        }        &#10;    }&#10;" description="" toReformat="true" toShortenFQNames="true">
    <variable name="UPPERVAR" expression="camelCase(String)" defaultValue="" alwaysStopAt="true" />
    <variable name="LOWERVAR" expression="snakeCase(String)" defaultValue="$UPPERVAR$" alwaysStopAt="true" />
    <variable name="BACKREF" expression="className()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="softly" value="org.assertj.core.api.SoftAssertions.assertSoftly(a-&gt;{&#10;            a.assertThat($CURSOR$)&#10;    $END$;&#10;            &#10;        });" description="" toReformat="true" toShortenFQNames="true" useStaticImport="true">
    <variable name="CURSOR" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="sfm" value="com.infusionsoft.utils.StreamUtils.stream($SELECTION$)&#10;    .filter($VAR$-&gt; $FILTER$)&#10;    .map($VAR$-&gt; $END$)&#10;    .collect($COLLECTOR$)" description="Stream with Map" toReformat="true" toShortenFQNames="true" useStaticImport="true">
    <variable name="VAR" expression="iterableVariable()" defaultValue="item" alwaysStopAt="true" />
    <variable name="FILTER" expression="" defaultValue="return java8.util.Objects.nonNull($VAR$" alwaysStopAt="true" />
    <variable name="COLLECTOR" expression="variableOfType(Type)" defaultValue="com.google.common.collect.ImmutableList.toImmutableList()" alwaysStopAt="true" />
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
    </context>
  </template>
</templateSet>